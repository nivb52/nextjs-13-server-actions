generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  following     Follows[] @relation("follower")
  followedBy    Follows[] @relation("following")
  likes         Likes[]   @relation("userLikes")
  posts         Post[]    @relation("author")
  sessions      Session[]
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  isPublished Boolean
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likes       Likes[]  @relation("postLikes")
  author      User     @relation("author", fields: [userId], references: [id])
}

model Likes {
  userId String 
  postId String
  post   Post    @relation("postLikes", fields: [postId], references: [id])
  user   User    @relation("userLikes", fields: [userId], references: [id])

  @@id([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
